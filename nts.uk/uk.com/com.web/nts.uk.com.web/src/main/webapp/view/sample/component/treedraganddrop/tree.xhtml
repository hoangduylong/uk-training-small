<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:com="http://xmlns.jcp.org/jsf/component"
	xmlns:h="http://xmlns.jcp.org/jsf/html">

<body>

	<ui:composition template="../../../../master/base.xhtml">
		<ui:define name="htmlHead">
			<script>
				var dialogSize = {
					width : 300,
					height : 200
				};
			</script>

			<com:stylefile path="../../catalog/catalog.css" />
			<com:scriptfile set="IGNITE" />
			<com:scriptfile path="start.js" />
			<com:scriptfile path="../../catalog/catalog.js" />
		</ui:define>

		<ui:define name="content">
			<div id="functions-area"></div>
			<div id="contents-area">
				<div id="side-menu" class="cf"></div>
				<div id="content" class="cf">
					<h1>TreeGrid</h1>
					<h2>Overview</h2>
					<button data-bind="click: resetSelection">Reset</button>
					<button data-bind="click: changeDataSource">Next
						Datasource</button>
					<div class="cf">
						<div style="float: left">
							<h3>Single Selection</h3>
							<div id="treegrid2"
								data-bind="ntsTreeDragAndDrop:{
										width: 1000,
										height: 250,
										rows: 10,
										dataSource: items2,
										value: singleSelectedCode,
										primaryKey: 'code',
										childDataKey: 'childs',
										primaryText: 'nodeText',
										maxDeepLeaf: 2,
										maxChildInNode: 3,
										multiple: false,
										enable: true}">
							</div>
						</div>
						<div style="float: left">
							<br />
							<br />
							<h4>Your single selected code:</h4>
							<span data-bind="text: singleSelectedCode"></span>
						</div>
					</div>
					<div class="cf">
						<div style="float: left;">
							<h3>Multi Selection</h3>
							<div>
								 <div style="display: inline-block;">
									<div id="treegrid"
										data-bind="ntsTreeDragAndDrop:{
										width: 1000, 
										height: 250,
										options: items1,
										selectedValues: selectedCode,
										optionsValue: 'code',
										optionsChild: 'childs',
										optionsText: 'nodeText',
										multiple: true}">
									</div>
								</div>
							</div>
						</div>
						<div style="float: left">
							<br />
							<br />
							<h4>Your multiple selected code:</h4>
							<com:ko-foreach bind="selectedCode">
								<div data-bind="text: $data"></div>
							</com:ko-foreach>
						</div>
					</div>
					<div class="cf">
						<div style="float: left;">
							<h3>With searchbox</h3>
							<div>
								<div data-bind="ntsSearchBox: {targetKey: 'code', mode:'igTreeDrag', comId:'treegrid3', items: items1,           
									searchText: 'test',  selected: selectedCode, selectedKey: 'code', childField: 'childs', fields: ['code', 'nodeText'], enable: true} "/>
								 <div style="display: inline-block;">
									<div id="treegrid3"
										data-bind="ntsTreeDragAndDrop:{
										width: 1000, 
										height: 250,
										options: items1,
										selectedValues: selectedCode,
										optionsValue: 'code',
										optionsChild: 'childs',
										optionsText: 'nodeText',
										multiple: true}">
									</div>
								</div>
							</div>
						</div>
					</div>
					<article class="cf">
						<div class="tabs">
							<ol>
								<li><a href="#tabs-html">HTML Binding</a></li>
								<li><a href="#tabs-viewmodel">ViewModel</a></li>
								<li><a href="#tabs-method">Method</a></li>
							</ol>
							<div id="tabs-html" class="cf">
								<h2>HTML</h2>
								<p>
									Using Ignite library so you must include following line in <i>&lt;ui:define
										name="htmlHead"&gt;</i>
								</p>
								<pre>
									<![CDATA[<ui:define name="htmlHead">
	<com:scriptfile set="IGNITE" />
</ui:define>]]>
								</pre>
								<pre>
									<![CDATA[<!-- Single -->
<div id="treegrid2"
	data-bind="ntsTreeDragAndDrop:{
			width: 1000,
			height: 250,
			rows: 10,
			dataSource: items2,
			value: singleSelectedCode,
			primaryKey: 'code',
			childDataKey: 'childs',
			primaryText: 'nodeText',
			maxDeepLeaf: 2,
			maxChildInNode: 3,
			multiple: false,
			enable: true}">
</div>

<!--  Multi -->
<div id="treegrid"
	data-bind="ntsTreeDragAndDrop:{
	width: 1000, 
	height: 250,
	options: items1,
	selectedValues: selectedCode,
	customValidate: function(){return false;},
	optionsValue: 'code',
	optionsChild: 'childs',
	optionsText: 'nodeText',
	multiple: true}">
</div>
]]>
								</pre>
								<h2>API</h2>
								<table>
									<colgroup>
										<col width="200px" />
									</colgroup>
									<thead>
										<tr>
											<th><h4>Binding</h4></th>
											<th><h4>Description</h4></th>
										</tr>
									</thead>
									<tbody>
										<tr>
											<td>width<br />
											<i>(optional)</i></td>
											<td><b>Type:</b> null | string | number<br /> <b>Default:</b>
												"100%"<br /> <b>Members:</b><br /> <i>null:</i> Will stretch
												to fit the sum of the columns widths.<br /> <i>number:</i>
												The widget width can be set in pixels as a number. Example
												values: 800, 700.<br /> <i>string:</i> The widget width can
												be set in pixels (px) or percentage (%). Example values:
												"800px", "800" (defaults to pixels), "100%".</td>
										</tr>
										<tr>
											<td>optionsChild / childDataKey<br /></td>
											<td><b>Type:</b>string<br /> <b>Default:</b>
												"Nodes"<br /> <i>The property to determine data
													sources for children.</i></td>
										</tr>
										<tr>
											<td>height</td>
											<td><b>Type:</b> null | string | number<br /> <b>Members:</b><br />
												<i>null:</i> Will stretch vertically to fit data.<br /> <i>string:</i>
												The widget height can be set in pixels (px) and percentage
												(%).<br /> <i>number:</i> The height can be set as a number in pixels.</td>
										</tr>
										<tr>
											<td>options / dataSource</td>
											<td><b>Type:</b> array&lt;any&gt;<br /> List data to generate Tree</td>
										</tr>
										<tr>
											<td>optionsValue / primaryKey</td>
											<td><b>Type:</b> string<br /> Field in data will be set
												as primaryKey</td>
										</tr>
										<tr>
											<td>optionsText / primaryText</td>
											<td><b>Type:</b> string<br /> Field in data will be set
												as primary text (for not determine columns).</td>
										</tr>
										<tr>
											<td>selectOnParent</td>
											<td><b>Type:</b> boolean<br /> With checkbox: If select a child, parent is selected, too. If select a node, all node of it will be selected</td>
										</tr>
										<tr>
											<td>multiple</td>
											<td><b>Type:</b> boolean<br /> Enables/disables multiple
												selection</td>
										</tr>
										<tr>
											<td>value</td>
											<td><b>Type:</b> array&lt;any&gt;<br /> List selected value</td>
										</tr>
										<tr>
											<td>selectedValues</td>
											<td><b>Type:</b> array&lt;any&gt;<br /> List selected
												value for multiple tree</td>
										</tr>
										<tr>
											<td>rows</td>
											<td><b>Type:</b> number<br /> max rows are displayed in view and will have scroll</td>
										</tr>
										<tr>
											<td>receiveOtherTreeNode</td>
											<td><b>Type:</b> boolean<br /> with receiveOtherTreeNode equal true, this tree can receive dropped node from other tree.</td>
										</tr>
										<tr>
											<td>maxDeepLeaf</td>
											<td><b>Type:</b> number<br /> max deep leaf of this tree. Deeper than this value, node can be dropped on.</td>
										</tr>
										<tr>
											<td>maxChildInNode</td>
											<td><b>Type:</b> number<br /> Max children in o node.</td>
										</tr>
										<tr>
											<td>customValidate</td>
											<td><b>Type:</b> Function<br /> function for custom validate, and this function should return boolean value.</td>
										</tr>
									</tbody>
								</table>
							</div>
							<div id="tabs-viewmodel" class="cf">
								<pre>
									<![CDATA[class ScreenModel {
        index: number;
        items1: any;
        items2: any;
        selectedCode: any;
        singleSelectedCode: any;
        columns: any;
        columns2: any;
    
        constructor() {
            var self = this;
            self.items1 = ko.observableArray([]);
            for(let i = 0; i <= 2; i++) {
                let level1 = new Node('0000' + i, 'サービス部 サービス部 サービス部  vサービス部  サービス部サービス部 サービス部 サービス部 サービス部サービス部 サービス部サービス部' + i, []);
                for(let j = 1; j <= 2; j++) {
                    let ij = i + "" + j;
                    let level2 = new Node('0000' + ij, 'サービス部' + ij, []);
                    level1.childs.push(level2);
                    for(let k = 1; k <= 2; k++) {
                        let  ijk = ij + "" + k;
                        let level3 = new Node('0000' + ijk, 'サービス部' + ijk, []);
                        level2.childs.push(level3);
                        for(let l = 1; l <= 2; l++) {
                            let  ijkl = ijk + "" + l;
                            let level4 = new Node('0000' + ijkl, 'サービス部' + ijkl, []);
                            level3.childs.push(level4);
                            for(let n = 1; n <= 2; n++) {
                                let  ijkln = ijkl + "" + n;
                                let level5 = new Node('0000' + ijkln, 'サービス部' + ijkln, []);
                                level4.childs.push(level5);
                            }
                        }
                    }   
                }
                self.items1.push(level1);
            }
            self.items2 = ko.observableArray(self.items1());
            self.selectedCode = ko.observableArray([]);
            self.singleSelectedCode = ko.observable(null);
            self.index = 0;
            self.columns = ko.observableArray([{ headerText: "Item Code", width: "250px", key: 'code', dataType: "string", hidden: false },
            { headerText: "Item Text", key: 'nodeText', width: "200px", dataType: "string" }]);
            self.columns2 = ko.observableArray([{ headerText: "Item Code", width: "250px", key: 'code', dataType: "string", hidden: false },
            { headerText: "Item Text", key: 'nodeText', width: "250px", dataType: "string" },
            { headerText: "Item Auto Generated Field", key: 'custom', width: "200px", dataType: "string" }]);            
        }
        
        resetSelection(): void {
            var self = this;
            self.items1([new Node('0001', 'サービス部', [
                new Node('0001-1', 'サービス部1', []),
                new Node('0001-2', 'サービス部2', []),
                new Node('0001-3', 'サービス部3', [])
            ]), new Node('0002', '開発部', [])]);
            self.items2(self.items1());
            self.singleSelectedCode('0002');
            self.selectedCode(['0001-1', '0002']);
        }
        
        changeDataSource(): void {
            var self = this;
            var i = 0;
            var newArrays = new Array();
            while (i < 50) {
                self.index ++;
                i++;
                newArrays.push(new Node(self.index.toString(), 'Name ' + self.index.toString(), []));
            };
            self.items1(newArrays);
            self.items2(newArrays);
        }
    }
    
    class Node {
        code: string;
        name: string;
        nodeText: string;
        custom: string;
        childs: Array<Node>;
        constructor(code: string, name: string, childs: Array<Node>) {
            var self = this;
            self.code = code;
            self.name = name;
            self.nodeText = self.code + ' ' + self.name;
            self.childs = childs;
            self.custom = 'Random' + new Date().getTime();
        }
    }]]>
								</pre>
							</div>
							<div id="tabs-method" class="cf">
								<h2>Method</h2>
								<table>
									<colgroup>
										<col width="200px" />
									</colgroup>
									<thead>
										<tr>
											<th><h4>Method</h4></th>
											<th><h4>Parameter</h4></th>
											<th><h4>Return</h4></th>
											<th><h4>Description</h4></th>
										</tr>
									</thead>
									<tbody>
										<tr>
											<td>$("#treegrid2").ntsTreeDrag("getPrevious", node)</td>
											<td>
												node: base node.<br/>
												<i>Type: any (<b>id of node</b> in data source or object get with method <b>getSelected or getPrevious</b>)</i>
											</td>
											<td>
												Object for node or null<br/>
												<i>Structure: <br/>
													␣␣␣␣binding: property for binding a node<br/>
													␣␣␣␣data: data of node <br/>
													␣␣␣␣element: element in html of node<br/>
													␣␣␣␣id: id of node in data source <br/>
													␣␣␣␣path: path for structure in tree (sample: '0_0')</i>
											</td>
											<td>Get sibling before passed node.</td>
										</tr>
										<tr>
											<td>$("#treegrid2").ntsTreeDrag("getSelected")</td>
											<td>none</td>
											<td>
												Object for selected node or null<br/>
												<i>Structure: <br/>
													␣␣␣␣binding: property for binding a node<br/>
													␣␣␣␣data: data of node <br/>
													␣␣␣␣element: element in html of node<br/>
													␣␣␣␣id: id of node in data source <br/>
													␣␣␣␣path: path for structure in tree (sample: '0_0')</i>
											</td>
											<td>Get current selected node.</td>
										</tr>
										<tr>
											<td>$("#treegrid2").ntsTreeDrag("setSelected", ids)</td>
											<td>ids: a id or list ids of node</td>
											<td>none</td>
											<td>set selected node.</td>
										</tr>
										<tr>
											<td>$("#treegrid2").ntsTreeDrag("deselectAll")</td>
											<td>none</td>
											<td>none</td>
											<td>deselect all selected node.</td>
										</tr>
										<tr>
											<td>$("#treegrid2").ntsTreeDrag("isMulti")</td>
											<td>none</td>
											<td>boolean</td>
											<td>check tree is multiple or single select.</td>
										</tr>
										<tr>
											<td>$("#treegrid2").ntsTreeDrag("getParent", node)</td>
											<td>
												node: base node.<br/>
												<i>Type: any (<b>id of node</b> in data source or object get with method <b>getSelected or getPrevious</b>)</i>
											</td>
											<td>
												Object for node or null<br/>
												<i>Structure: <br/>
													␣␣␣␣binding: property for binding a node<br/>
													␣␣␣␣data: data of node <br/>
													␣␣␣␣element: element in html of node<br/>
													␣␣␣␣id: id of node in data source <br/>
													␣␣␣␣path: path for structure in tree (sample: '0_0')</i>
											</td>
											<td>Get parent of passed node.</td>
										</tr>
										<tr>
											<td>$("#treegrid2").ntsTreeDrag("moveNext", target, node)</td>
											<td>
												target: a node that will put to next (will become siblings).<br/>
												node: base node for move.<br/>
												<i>Type: any (<b>id of node</b> in data source or object get with method <b>getSelected or getPrevious</b>)</i>
											</td>
											<td>
												boolean: moved or not
											</td>
											<td>move to next target node.</td>
										</tr>
										<tr>
											<td>$("#treegrid2").ntsTreeDrag("moveInto", target, node)</td>
											<td>
												target: a node that will put into (will become child).<br/>
												node: base node for move.<br/>
												<i>Type: any (<b>id of node</b> in data source or object get with method <b>getSelected or getPrevious</b>)</i>
											</td>
											<td>
												boolean: moved or not
											</td>
											<td>move into target node.</td>
										</tr>
										<tr>
											<td>$("#treegrid2").ntsTreeDrag("moveUp", node)</td>
											<td>
												node: base node for move.<br/>
												<i>Type: any (<b>id of node</b> in data source or object get with method <b>getSelected or getPrevious</b>)</i>
											</td>
											<td>
												boolean: moved or not
											</td>
											<td>move target node up 1.</td>
										</tr>
										<tr>
											<td>$("#treegrid2").ntsTreeDrag("moveDown", node)</td>
											<td>
												node: base node for move.<br/>
												<i>Type: any (<b>id of node</b> in data source or object get with method <b>getSelected or getPrevious</b>)</i>
											</td>
											<td>
												boolean: moved or not
											</td>
											<td>move target node down 1.</td>
										</tr>
									</tbody>
								</table>
							</div>
							
						</div>
					</article>
					<div class="footer cf">
						<button class="previous large">Previous</button>
						<button class="next proceed large">Next</button>
					</div>
				</div>
			</div>
		</ui:define>
	</ui:composition>
</body>
</html>