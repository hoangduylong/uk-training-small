<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:com="http://xmlns.jcp.org/jsf/component"
	xmlns:h="http://xmlns.jcp.org/jsf/html">

<body>

	<ui:composition template="../../../../master/base.xhtml">
		<ui:define name="htmlHead">
			<script>var dialogSize = { width: 300, height: 200 };</script>
			<com:stylefile path="../../catalog/catalog.css" />
			<com:stylefile path="main.css" />
			<com:scriptfile path="start.js" />
			<com:scriptfile path="../../catalog/catalog.js" />
			<com:scriptfile set="IGNITE" />
		</ui:define>

		<ui:define name="content">
			<div id="functions-area"></div>
			<div id="contents-area">
				<div id="side-menu" class="cf"></div>
				<div id="content" class="cf">
					<h1>SwapList</h1>
					<div data-bind="ntsCheckBox: { checked: disableMoveButton, text: 'Disable Move Button' }"></div>
					<div>
						<div style="display: inline-block;">
							<div id="swap-list"
								data-bind="ntsSwapList: {
								showSearchBox: { showLeft : true, showRight: true},
								height: 300,
								dataSource: itemsSwap,
								disableMoveButton: disableMoveButton,
								primaryKey: 'code',
								enableRowNumbering: false,
								columns: columns,
								value: currentCodeListSwap,
								searchMode: 'filter',
								searchCriterion: ['code'],
								draggable: true,
								leftSearchBoxText: 'コードで検索・・・',
								rightSearchBoxText: 'コードで検索・・・',
								multipleDrag: { left: true, right: false },
								innerDrag: { left: false, right: true },
								outerDrag: { left: true, right: true },
								itemsLimit: { left: 10000, right: 10 },
								beforeMoveLeft: beforeLeft,
								beforeMoveRight: beforeRight,
								beforeAllLeft: beforeAllL,
								beforeAllRight: beforeAllR,
								afterMoveLeft: afterLeft,
								afterMoveRight: afterRight,
								afterAllLeft: afterAllL,
								afterAllRight: afterAllR
							}"></div>
						</div>
						<div id="up-down"
							data-bind="ntsUpDown: {
									targetSource: currentCodeListSwap,
									primaryKey: 'code',
									comId: '#swap-list',
									type: 'swap',
									swapTarget: 'right'
								}, visible: disableMoveButton"></div>
					</div>
					<button id="bindSource" type="button" data-bind="click: bindSource">Bind</button>
					<button id="check" type="button">Check</button>
					<button data-bind="click: remove">Remove</button>
					<article class="cf">
						<div class="tabs">
							<ol>
								<li><a href="#tabs-html">HTML Binding</a></li>
								<li><a href="#tabs-viewmodel">ViewModel</a></li>
								<li><a href="#tabs-api">API</a></li>
							</ol>
							<div id="tabs-html" class="cf">
								<h2>HTML</h2>
								<p>
									Using Ignite library so you must include following line in <i>&lt;ui:define
										name="htmlHead"&gt;</i>
								</p>
<pre><![CDATA[<ui:define name="htmlHead">
	<com:scriptfile set="IGNITE" />
</ui:define>]]>
</pre>
<pre><![CDATA[<div id="swap-list" data-bind="ntsSwapList: {
	showSearchBox: { showLeft : true, showRight: true},
	height: 300,
	dataSource: itemsSwap,
	disableMoveButton: disableMoveButton,
	primaryKey: 'code',
	columns: columns,
	value: currentCodeListSwap,
	searchMode: 'filter',
	searchCriterion: ['code'],
	draggable: true,
	multipleDrag: { left: true, right: false },
	innerDrag: { left: false, right: true },
	outerDrag: { left: true, right: true } 
}"></div>

<!-- Updown Button -->
<div id="up-down"
	data-bind="ntsUpDown: {
			targetSource: currentCodeListSwap,
			primaryKey: 'code',
			comId: '#swap-list',
			type: 'swap',
			swapTarget: 'right'
		}"></div>]]></pre>
							</div>
							<div id="tabs-viewmodel" class="cf">
								<h2>TypeScript</h2>
<pre><![CDATA[
class ScreenModel {
       itemsSwap: KnockoutObservableArray<ItemModel>;
       columns: KnockoutObservableArray<nts.uk.ui.NtsGridListColumn>;
       currentCodeListSwap: KnockoutObservableArray<any>;
       test: KnockoutObservableArray<any>;

       constructor() {

           this.itemsSwap = ko.observableArray([]);
           
           var array = [];
           for (var i = 0; i < 10000; i++) {
               array.push(new ItemModel(i, '基本給', "description"));
           }
           this.itemsSwap(array);

           this.columns = ko.observableArray([
               { headerText: 'コード', key: 'code', width: 100 },
               { headerText: '名称', key: 'name', width: 150 }
           ]);

           this.currentCodeListSwap = ko.observableArray([]);
           this.test = ko.observableArray([]);
       }
       
       remove(){
           this.itemsSwap.shift();            
       }
       
   }
   
   class ItemModel {
       code: number;
       name: string;
       description: string;
       deletable: boolean;
       constructor(code: number, name: string, description: string) {
           this.code = code;
           this.name = name;
           this.description = description;
           this.deletable = code % 3 === 0;
       }
   }
]]></pre>
								</div>
								<div id="tabs-api" class="cf">
									<h2>Properties</h2>
									<table class="table">
										<colgroup>
											<col width="200px" />
										</colgroup>
										<thead>
											<tr>
												<th><h4>Binding</h4></th>
												<th><h4>Description</h4></th>
											</tr>
										</thead>
										<tbody>
											<tr>
												<td>width</td>
												<td><b>Type:</b> null | string | number<br /> <b>Members:</b><br />
													<i>null:</i> Will stretch to fit the sum of the columns widths.<br />
													<i>number:</i> The widget width can be set in pixels as a
													number. Example values: 800, 700.<br /> <i>string:</i> The
													widget width can be set in pixels (px) or percentage (%).
													Example values: "800px", "800" (defaults to pixels), "100%".</td>
											</tr>
											<tr>
												<td>height</td>
												<td><b>Type:</b> null | string | number<br /> <b>Members:</b><br />
													<i>null:</i> Will stretch vertically to fit data.<br /> <i>string:</i>
													The widget height can be set in pixels (px) and percentage (%).<br />
													<i>number:</i> The height can be set as a number in pixels.</td>
											</tr>
											<tr>
												<td>showSearchBox</td>
												<td><b>Type:</b> Object, is text box and search button
													showed.<br /> <b>Options:</b> { showLeft : boolean, showRight:
													boolean}<br /> <i>Default:</i> {}.</td>
											</tr>
											<tr>
												<td>showSort</td>
												<td><b>Type:</b> Object, is text box and search button
													showed.<br /> <b>Options:</b> { showLeft : boolean, showRight:
													boolean}<br /> <i>Default:</i> {}.</td>
											</tr>
											<tr>
												<td>disableMoveButton</td>
												<td><b>Type:</b> boolean<br /> Disable move button for swap
													list</td>
											</tr>
											<tr>
												<td>options / dataSource</td>
												<td><b>Type:</b> array&lt;any&gt;<br /> List data to
													generate original GridList at left</td>
											</tr>
											<tr>
												<td>optionsValue / primaryKey</td>
												<td><b>Type:</b> string<br /> Field in data will be set as
													primaryKey</td>
											</tr>
											<tr>
												<td>columns</td>
												<td><b>Type:</b> array&lt;column&gt;<br /> An array of
													column objects:<br /> <i>headerText:</i> Text for header<br />
													<i>prop/ key:</i> Property in data array for column<br /> <i>width:</i>
													Width for column<br /> <b><i>(*): Can use other
															properties of columns of iggrid</i></b></td>
											</tr>
											<tr>
												<td>value</td>
												<td><b>Type:</b> array&lt;any&gt;<br /> List selected value
													from left grid and is showed in right grid.</td>
											</tr>
											<tr>
												<td>beforeMoveLeft</td>
												<td><b>Type:</b> function<br /> 
													action before move to left. Return false if cancel move</td>
											</tr>
											<tr>
												<td>beforeMoveRight</td>
												<td><b>Type:</b> function<br /> 
													action before move to right. Return false if cancel move</td>
											</tr>
											<tr>
												<td>beforeAllLeft</td>
												<td><b>Type:</b> function<br /> 
													action before move all to left. Return false if cancel move</td>
											</tr>
											<tr>
												<td>beforeAllRight</td>
												<td><b>Type:</b> function<br /> 
													action before move all to right. Return false if cancel move</td>
											</tr>
											<tr>
												<td>afterMoveLeft</td>
												<td><b>Type:</b> function<br /> 
													action after move to left.</td>
											</tr>
											<tr>
												<td>afterMoveRight</td>
												<td><b>Type:</b> function<br /> 
													action after move to right.</td>
											</tr>
											<tr>
												<td>afterAllLeft</td>
												<td><b>Type:</b> function<br /> 
													action after move all to left.</td>
											</tr>
											<tr>
												<td>afterAllRight</td>
												<td><b>Type:</b> function<br /> 
													action after move all to right.</td>
											</tr>
										</tbody>
									</table>
								</div>
							</div>
						</article>
					<div class="footer cf">
						<button class="previous large">Previous</button>
						<button class="next proceed large">Next</button>
					</div>
				</div>
			</div>
		</ui:define>
	</ui:composition>
</body>
</html>