<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:com="http://xmlns.jcp.org/jsf/component"
	xmlns:h="http://xmlns.jcp.org/jsf/html">

<body>

	<ui:composition template="../../../../master/base.xhtml">
		<ui:define name="htmlHead">
			<script>
				var dialogSize = {
					width : 300,
					height : 200
				};
			</script>
			<com:stylefile path="../../catalog/catalog.css" />
			<com:stylefile path="main.css" />
			<com:scriptfile set="IGNITE" />
			<com:scriptfile path="start.js" />
			<com:scriptfile path="../../catalog/catalog.js" />
		</ui:define>

		<ui:define name="content">
			<div id="functions-area"></div>
			<div id="contents-area">
				<div id="side-menu" class="cf"></div>
				<div id="content" class="cf">
					<h1>Up down</h1>
					<h2>Swap list case</h2>
					<div>
						<div id="swap-up-down"
							data-bind="ntsUpDown: {
									targetSource: itemsSwap,
									primaryKey: 'code',
									comId: '#swap-list',
									type: 'swap',
									swapTarget: 'left',
									enable: false
								}"
							class=""></div>
						<div style="display: inline-block;">
							<div id="swap-list"
								data-bind="ntsSwapList: {
											showSearchBox: true,
											height: 300,
											dataSource: itemsSwap,
											primaryKey: 'code',
											columns: columns,
											value: currentCodeListSwap
										}"
								class=""></div>
						</div>
						<div id="swap-up-down"
							data-bind="ntsUpDown: {
									targetSource: currentCodeListSwap,
									primaryKey: 'code',
									comId: '#swap-list',
									type: 'swap',
									swapTarget: 'right'
								}"
							class=""></div>
					</div>
					<div>
									<article class="cf">
							<div class="tabs">
								<ol>
									<li><a href="#tabs-html">HTML Binding</a></li>
									<li><a href="#tabs-viewmodel">ViewModel</a></li>
								</ol>
								<div id="tabs-html" class="cf">
									<h2>HTML</h2>
									<p>Using Ignite library so you must include following line in <i>&lt;ui:define name="htmlHead"&gt;</i></p>
<pre><![CDATA[<ui:define name="htmlHead">
	<com:scriptfile set="IGNITE" />
</ui:define>]]></pre>
<pre><![CDATA[<div>
	<div id="swap-up-down"
		data-bind="ntsUpDown: {
				targetSource: itemsSwap,
				primaryKey: 'code',
				comId: '#swap-list',
				type: 'swap',
				swapTarget: 'left'
			}"
		class=""></div>
	<div style="display: inline-block;">
		<div id="swap-list"
			data-bind="ntsSwapList: {
						showSearchBox: true,
						height: 300,
						dataSource: itemsSwap,
						primaryKey: 'code',
						columns: columns,
						value: currentCodeListSwap
					}"
			class=""></div>
	</div>
	<div id="swap-up-down"
		data-bind="ntsUpDown: {
				targetSource: currentCodeListSwap,
				primaryKey: 'code',
				comId: '#swap-list',
				type: 'swap',
				swapTarget: 'right'
			}"
		class=""></div>
</div>]]></pre>
								</div>
								<div id="tabs-viewmodel" class="cf">
									<h2>TypeScript</h2>
<pre><![CDATA[
	class ScreenModel {
        itemsSwap: KnockoutObservableArray<ItemModel>;
        columns: KnockoutObservableArray<nts.uk.ui.NtsGridListColumn>;
        currentCodeListSwap: KnockoutObservableArray<any>;

        constructor() {

            this.itemsSwap = ko.observableArray([]);
            
            var array = [];
            for (var i = 0; i < 10000; i++) {
                array.push(new ItemModel("test" + i, '基本給', "description"));
            }
            this.itemsSwap(array);

            this.columns = ko.observableArray([
                { headerText: 'コード', key: 'code', width: 100 },
                { headerText: '名称', key: 'name', width: 150 }
            ]);
            this.currentCodeListSwap = ko.observableArray([]);
        }
    }
    
    class ItemModel {
        code: string;
        name: string;
        description: string;
        constructor(code: string, name: string, description: string) {
            this.code = code;
            this.name = name;
            this.description = description;
        }
    }
]]></pre>
								</div>
							</div>
						</article>
								</div>
					<br />
					<hr />
					<h2>Multiple select grid case</h2>
					<div>
						<div style="display: inline-block;">
							<table id="grid-test"
								data-bind="ntsGridList: {
										height: 300,
										dataSource: itemsSwap,
										primaryKey: 'code',
										columns: columns,
										value: test,
										multiple: true
									}"
								class=""></table>
						</div>
						<div id="grid-up-down"
							data-bind="ntsUpDown: {
									targetSource: itemsSwap,
									primaryKey: 'code',
									comId: '#grid-test',
									type: 'grid'
								}"
							class=""></div>
					</div>
					<div>
									<article class="cf">
							<div class="tabs">
								<ol>
									<li><a href="#tabs-html">HTML Binding</a></li>
									<li><a href="#tabs-viewmodel">ViewModel</a></li>
								</ol>
								<div id="tabs-html" class="cf">
									<h2>HTML</h2>
									<p>Using Ignite library so you must include following line in <i>&lt;ui:define name="htmlHead"&gt;</i></p>
<pre><![CDATA[<ui:define name="htmlHead">
	<com:scriptfile set="IGNITE" />
</ui:define>]]></pre>
<pre><![CDATA[<div>
	<div style="display: inline-block;">
		<table id="grid-test"
			data-bind="ntsGridList: {
					height: 300,
					dataSource: itemsSwap,
					primaryKey: 'code',
					columns: columns,
					value: test,
					multiple: true
				}"
			class=""></table>
	</div>
	<div id="grid-up-down"
		data-bind="ntsUpDown: {
				targetSource: itemsSwap,
				primaryKey: 'code',
				comId: '#grid-test',
				type: 'grid'
			}"
		class=""></div>
</div>]]></pre>
								</div>
								<div id="tabs-viewmodel" class="cf">
									<h2>TypeScript</h2>
<pre><![CDATA[
	class ScreenModel {
        itemsSwap: KnockoutObservableArray<ItemModel>;
        columns: KnockoutObservableArray<nts.uk.ui.NtsGridListColumn>;
		test: KnockoutObservableArray<any>;
		
        constructor() {

            this.itemsSwap = ko.observableArray([]);
            
            var array = [];
            for (var i = 0; i < 10000; i++) {
                array.push(new ItemModel("test" + i, '基本給', "description"));
            }
            this.itemsSwap(array);

            this.columns = ko.observableArray([
                { headerText: 'コード', key: 'code', width: 100 },
                { headerText: '名称', key: 'name', width: 150 }
            ]);
            this.test = ko.observableArray([]);
        }
        
    }
    
    class ItemModel {
        code: string;
        name: string;
        description: string;
        constructor(code: string, name: string, description: string) {
            this.code = code;
            this.name = name;
            this.description = description;
        }
    }
]]></pre>
								</div>
							</div>
						</article>
								</div>
					<br />
					<hr />
					<h2>Single select grid case</h2>
					<div>
						<div style="display: inline-block;">
							<table id="grid-test-single"
								data-bind="ntsGridList: {
										height: 300,
										dataSource: itemsSwap,
										primaryKey: 'code',
										columns: columns,
										value: testSingle,
										multiple: false
									}"
								class=""></table>
						</div>
						<div id="grid-up-down"
							data-bind="ntsUpDown: {
									targetSource: itemsSwap,
									primaryKey: 'code',
									comId: '#grid-test-single',
									type: 'grid'
								}"
							class=""></div>
					</div>
					<div>
									<article class="cf">
							<div class="tabs">
								<ol>
									<li><a href="#tabs-html">HTML Binding</a></li>
									<li><a href="#tabs-viewmodel">ViewModel</a></li>
								</ol>
								<div id="tabs-html" class="cf">
									<h2>HTML</h2>
									<p>Using Ignite library so you must include following line in <i>&lt;ui:define name="htmlHead"&gt;</i></p>
<pre><![CDATA[<ui:define name="htmlHead">
	<com:scriptfile set="IGNITE" />
</ui:define>]]></pre>
<pre><![CDATA[<div>
	<div style="display: inline-block;">
		<table id="grid-test-single"
			data-bind="ntsGridList: {
					height: 300,
					dataSource: itemsSwap,
					primaryKey: 'code',
					columns: columns,
					value: testSingle,
					multiple: false
				}"
			class=""></table>
	</div>
	<div id="grid-up-down"
		data-bind="ntsUpDown: {
				targetSource: itemsSwap,
				primaryKey: 'code',
				comId: '#grid-test-single',
				type: 'grid'
			}"
		class=""></div>
</div>]]></pre>
								</div>
								<div id="tabs-viewmodel" class="cf">
									<h2>TypeScript</h2>
<pre><![CDATA[
	class ScreenModel {
        itemsSwap: KnockoutObservableArray<ItemModel>;
        columns: KnockoutObservableArray<nts.uk.ui.NtsGridListColumn>;
		testSingle: KnockoutObservable<any>;
		
        constructor() {

            this.itemsSwap = ko.observableArray([]);
            
            var array = [];
            for (var i = 0; i < 10000; i++) {
                array.push(new ItemModel("test" + i, '基本給', "description"));
            }
            this.itemsSwap(array);

            this.columns = ko.observableArray([
                { headerText: 'コード', key: 'code', width: 100 },
                { headerText: '名称', key: 'name', width: 150 }
            ]);
            this.testSingle = ko.observable(null);
        }
        
    }
    
    class ItemModel {
        code: string;
        name: string;
        description: string;
        constructor(code: string, name: string, description: string) {
            this.code = code;
            this.name = name;
            this.description = description;
        }
    }
]]></pre>
								</div>
							</div>
						</article>
								</div>
					<br />
					<hr />
					<h2>Tree view grid case</h2>
					<div>
						<div style="display: inline-block;">
							<table id="treegrid"
								data-bind="ntsTreeGridView:{
										width: 1000, 
										height: 250,
										options: items1,
										selectedValues: selectedCode,
										optionsValue: 'code',
										optionsChild: 'childs',
										optionsText: 'nodeText',
										multiple: true,
										enable: true,
										columns: columns2,
										showCheckBox: true}"
								class="cf">
							</table>
						</div>
						<div id="tree-up-down"
							data-bind="ntsUpDown: {
									targetSource: items1,
									primaryKey: 'code',
									comId: '#treegrid',
									type: 'tree', 
									childDataKey: 'childs'
								}"
							class=""></div>
					</div>
					<div>
									<article class="cf">
							<div class="tabs">
								<ol>
									<li><a href="#tabs-html">HTML Binding</a></li>
									<li><a href="#tabs-viewmodel">ViewModel</a></li>
								</ol>
								<div id="tabs-html" class="cf">
									<h2>HTML</h2>
									<p>Using Ignite library so you must include following line in <i>&lt;ui:define name="htmlHead"&gt;</i></p>
<pre><![CDATA[<ui:define name="htmlHead">
	<com:scriptfile set="IGNITE" />
</ui:define>]]></pre>
<pre><![CDATA[<div>
	<div style="display: inline-block;">
		<table id="treegrid"
			data-bind="ntsTreeGridView:{
					width: 1000, 
					height: 250,
					options: items1,
					selectedValues: selectedCode,
					optionsValue: 'code',
					optionsChild: 'childs',
					optionsText: 'nodeText',
					multiple: true,
					enable: true,
					columns: columns2,
					showCheckBox: true}"
			class="cf">
		</table>
	</div>
	<div id="tree-up-down"
		data-bind="ntsUpDown: {
				targetSource: items1,
				primaryKey: 'code',
				comId: '#treegrid',
				type: 'tree', 
				childDataKey: 'childs'
			}"
		class=""></div>
</div>]]></pre>
								</div>
								<div id="tabs-viewmodel" class="cf">
									<h2>TypeScript</h2>
<pre><![CDATA[
	class ScreenModel {
        items1: KnockoutObservableArray<Node>;
        selectedCode: KnockoutObservableArray<any>;
        columns2: KnockoutObservableArray<any>;

        constructor() {
            this.items1 = ko.observableArray([]);
            for(let i = 1; i <= 2; i++) {
                let level1 = new Node('0000' + i, 'サービス部' + i, []);
                for(let j = 1; j <= 2; j++) {
                    let ij = i + "" + j;
                    let level2 = new Node('0000' + ij, 'サービス部' + ij, []);
                    level1.childs.push(level2);
                    for(let k = 1; k <= 2; k++) {
                        let  ijk = ij + "" + k;
                        let level3 = new Node('0000' + ijk, 'サービス部' + ijk, []);
                        level2.childs.push(level3);
                        for(let l = 1; l <= 2; l++) {
                            let  ijkl = ijk + "" + l;
                            let level4 = new Node('0000' + ijkl, 'サービス部' + ijkl, []);
                            level3.childs.push(level4);
                            for(let n = 1; n <= 2; n++) {
                                let  ijkln = ijkl + "" + n;
                                let level5 = new Node('0000' + ijkln, 'サービス部' + ijkln, []);
                                level4.childs.push(level5);
                            }
                        }
                    }   
                }
                this.items1.push(level1);
            }
            this.columns2 = ko.observableArray([{ headerText: "Item Code", width: "250px", key: 'code', dataType: "string", hidden: false },
            { headerText: "Item Text", key: 'nodeText', width: "200px", dataType: "string" }]);
            this.selectedCode = ko.observableArray([]);
        }
    }

    class Node {
        code: string;
        name: string;
        nodeText: string;
        custom: string;
        childs: Array<Node>;
        constructor(code: string, name: string, childs: Array<Node>) {
            var self = this;
            self.code = code;
            self.name = name;
            self.nodeText = self.code + ' ' + self.name;
            self.childs = childs;
            self.custom = 'Random' + new Date().getTime();
        }
    }
]]></pre>
								</div>
							</div>
						</article>
								</div>
					<div>
						<h2>API</h2>
					<table>
						<colgroup>
							<col width="200px" />
						</colgroup>
						<thead>
							<tr>
								<th><h4>Binding</h4></th>
								<th><h4>Description</h4></th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td>targetSource</td>
								<td><b>Type:</b> Array. Sources of target grid (tree) for
									action.<br /> + <b>Required: True.</b></td>
							</tr>
							<tr>
								<td>primaryKey</td>
								<td><b>Type:</b> string. Primary key of grid (tree).<br />
									<b>Required: True.</b></td>
							</tr>
							<tr>
								<td>comId</td>
								<td><b>Type:</b> string. Id of target element.<br /> <b>Required:
										True.</b></td>
							</tr>
							<tr>
								<td>type</td>
								<td><b>Type:</b> string. Type of target component.
									Currently, only support GridList, TreeList, SwapList<br /> <b>Required:
										True.</b></td>
							</tr>
							<tr>
								<td>childDataKey</td>
								<td><b>Type:</b> string. Children data in target sources
									for tree case<br /> <b>Required: False (True in tree
										case).</b></td>
							</tr>
							<tr>
								<td>swapTarget</td>
								<td><b>Type:</b> string. Because swap list have two grid.
									Needs to determine what grid for action.<br /> <i>Default:</i>
									'right'</td>
							</tr>
							<tr>
								<td>height</td>
								<td><b>Type:</b> number.<br /> <i>Default:</i> Height of
									target.</td>
							</tr>
						</tbody>
					</table>
					</div>
					<div class="footer cf">
						<button class="previous large">Previous</button>
						<button class="next proceed large">Next</button>
					</div>
				</div>
			</div>
		</ui:define>
	</ui:composition>
</body>
</html>