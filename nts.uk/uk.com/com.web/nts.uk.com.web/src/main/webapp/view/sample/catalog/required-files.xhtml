<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
	  xmlns:ui="http://java.sun.com/jsf/facelets"
	  xmlns:com="http://xmlns.jcp.org/jsf/component"
	  xmlns:h="http://xmlns.jcp.org/jsf/html">
	<body>
		<ui:composition template="../../../master/base.xhtml">
			<ui:define name="htmlHead">
				<script>var dialogSize = { width: 300, height: 200 };</script>
				<com:stylefile path="catalog.css" />
				<com:scriptfile path="start.js" />
				<com:scriptfile path="catalog.js" />
			</ui:define>
			<ui:define name="content">				
				<div id="functions-area"></div>
				<div id="contents-area" class="cf">
					<div id="side-menu" class="cf"></div>
					<div id="content" class="cf">
						<h1>Required files</h1>
						<article>
							<h2>Well, we will need some script to run right?</h2>
							<p>We'll use TypeScript for better reading and maintain. TypeScript will auto generate javascript file, then we'll include those files. This is how we usually setup:</p>
							<pre><![CDATA[<com:scriptfile path="qpp044.a.start.js" />
<com:scriptfile path="qpp044.a.vm.js" />
<com:scriptfile path="qpp044.a.service.js" />]]></pre>
							<ul>
								<li><b>nts.uk.(1).view.(2).start.js:</b> Setup how your page start. Usually bind your viewmodel here</li>
								<li><b>nts.uk.(1).view.(2).vm.js:</b> Defined your viewmodel here</li>
								<li><b>nts.uk.(1).view.(2).service.js:</b> Get data from server</li>
							</ul>
							<p>"(1)" is acronym for project you're working with. Ex: "pr" | "at" | "com" | "sys".</p>
							<p>"(2)" is ID of screen to makes it easy to search source file by name.</p>
						</article>
						<article>
							<h2>(2).start.ts</h2>
							<p>In this file we will setup to create viewmodel and binding it.</p>
							<pre><![CDATA[module nts.uk.pr.view.qpp004.a {
	__viewContext.ready(function() {
		var screenModel = new viewmodel.ScreenModel();
		screenModel.startPage().done(function() {
			__viewContext.bind(screenModel);
		});
	});
}]]></pre>
							<p>__viewContext will be automatic created by Kiban. It has 2 methods you'll need to take a look:</p>
							<ul>
								<li><b>ready(callback: () => void):</b> Pass your function here to callback after page is loaded</li>
								<li><b>bind(viewModel: any):</b> Pass your viewmodel here to binding it</li>
							</ul>
						</article>
						<article>
							<h2>(2).vm.ts</h2>
							<p>We will create our viewmodel here.</p>
<pre><![CDATA[module nts.uk.(1).view.(2).a.viewmodel {
	export class ScreenModel {
		paymentDateProcessingList: KnockoutObservableArray<any>;
		selectedPaymentDate: KnockoutObservable<any>;
		
		constructor() {
			var self = this;
			self.paymentDateProcessingList = ko.observableArray([]);
			self.selectedPaymentDate = ko.observable(null);
		}
		
		startPage(): JQueryPromise<any> {
			var self = this;
			
			var dfd = $.Deferred();
			service.getPaymentDateProcessingList().done(function(data) {
				self.paymentDateProcessingList(data);
				dfd.resolve();
			}).fail(function(res) {
				
			});
			return dfd.promise();
		}
	}
}]]></pre>
							<p>We'll put everything in a module with our screen name "qpp004.a" to prevent duplicate class. Our viewmodel usually named "ScreenModel" but you can change it if necessary. Our viewmodel has 2 properties: <i>paymentDateProcessingList</i> and <i>selectedPaymentDate</i> which are:</p>
							<ul>
								<li><b>KnockoutObservableArray&lt;any&gt;:</b> Define ko.observableArray type</li>
								<li><b>KnockoutObservable&lt;any&gt;:</b> Define ko.observable type</li>
							</ul>
							<p>Well, we have to get data from server with AJAX, right? <b>startPage()</b> function will handle this task. In this function we will call our <i>service</i> to get data from server. Then we'll create a Deferred object to check data is loaded successfully or failed (<a target="_blank" href="https://api.jquery.com/category/deferred-object/">more info</a>)</p>
						</article>
						<article>
							<h2>(2).service.ts</h2>
							<p>In this file we'll write code to get data from server. Create any variable or command and pass it to server if necessary.</p>
<pre><![CDATA[module nts.uk.(1).view.(2).a.service {
	var paths: any = {
		getPaymentDateProcessingList: "pr/proto/paymentdatemaster/processing/findall"
	}
	
	export function getPaymentDateProcessingList(): JQueryPromise<Array<any>> {
		var dfd = $.Deferred<Array<any>>();
		nts.uk.request.ajax(paths.getPaymentDateProcessingList)
			.done(function(res: Array<any>) {
				dfd.resolve(res);
			})
			.fail(function(res) {
				dfd.reject(res);
			})
		return dfd.promise();
	}
}]]></pre>
							<p>Simple right. We'll use <b>nts.uk.request.ajax</b> to get data AJAX from server (<a href="/nts.uk.com.web/view/sample/requestulitily/request.xhtml">more info about nts.uk.request</a>) </p>
						</article>
						<article>
							<h2>You're done! Congratulation</h2>
							<p>That's it. You have successfully created a basic page with required files to get data from server, binding it to viewmodel and ready to use in your page. Next you will need to create components to display and using that data we just get. Let move on!</p>
						</article>
						<div class="footer cf">
							<button class="previous large">Previous</button>
							<button class="next proceed large">Next</button>
						</div>
					</div>
				</div>
			</ui:define>
		</ui:composition>
   	</body>
</html>